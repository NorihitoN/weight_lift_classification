setwd("~/Documents/coursera/Practical_machine_learning/Assignment")
knitr::opts_chunk$set(echo = TRUE)
# Download csv file from web page
if (!file.exists("./training.csv")) {
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile = "./training.csv")
}
if (!file.exists("./testing.csv")) {
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
destfile = "./testing.csv")
}
training <- read.csv("training.csv")
training <- read.csv("training.csv")
testing <- read.csv("testing.csv")
testing <- read.csv("testing.csv")
dim(training); dim(testing)
# Exclude the columns
trainingSet <- training[, which(sapply(training, function(x){mean(is.na(x)) < 0.95}))]
testingSet <- testing[, which(sapply(training, function(x){mean(is.na(x)) < 0.95}))]
# Exclude near Zero Variance columns
nzv <- nearZeroVar(trainingSet)
# Exclude near Zero Variance columns
library(caret)
# Exclude near Zero Variance columns
library(caret)
nzv <- nearZeroVar(trainingSet)
trainingSet <- trainingSet[, -nzv]
nzv <- nearZeroVar(trainingSet)
trainingSet <- trainingSet[, -nzv]
testingSet <- testingSet[, -nzv]
dim(trainingSet); dim(testingSet)
# Exclude the columns
trainingSet <- training[, which(sapply(training, function(x){mean(is.na(x)) < 0.95}))]
testingSet <- testing[, which(sapply(training, function(x){mean(is.na(x)) < 0.95}))]
nzv <- nearZeroVar(trainingSet)
trainingSet <- trainingSet[, -nzv]
testingSet <- testingSet[, -nzv]
# Exclude first 5 columns which is default.
trainingSet <- trainingSet[, -(1:5)]
testingSet <- testingSet[, -(1:5)]
set.seed(1234)
trainIndex <- createDataPartition(trainingSet$classe, p=0.75, list = FALSE)
trainSet <- trainingSet[trainIndex,]
testSet <- trainingSet[-trainIndex,]
library(corrplot)
corrMatrix <- cor(trainSet[, -54])
corrplot(corrMatrix, method="circle", type="lower", order="hclust", tl.cex = 0.5, tl.col="black")
library(rpart)
mdlFit_DT <- rpart(classe ~ ., data=trainSet, method="class")
fancyRpartPlot(mdlFit_DT)
library(rattle)
fancyRpartPlot(mdlFit_DT)
predict_DT <- predict(mdlFit_DT, newdata = testSet)
confusionMatrix(predic_DT, testSet$classe)
confusionMatrix(predict_DT, testSet$classe)
head(predict_DT)
predict_DT <- predict(mdlFit_DT, newdata = testSet, type="class")
confusionMatrix(predict_DT, testSet$classe)
mdlFit_RF <- train(classe ~ ., data = trainSet, method="rf", prox = TRUE)
mdlFit_RF <- train(classe ~ ., data = trainSet, method="rf", prox = TRUE)
mdlFit_RF <- train(classe ~ ., data = trainSet, method="rf")
set.seed(1234)
mdlFit_RF
predict_RF <- predict(mdlFit_RF, newdata = testSet)
head(predict_RF)
confusionMatrix(predict_RF, testSet$classe)
set.seed(1234)
mdlFit_GBM <- train(classe ~ ., data = trainSet, method="gbm")
mdlFit_GBM
predict_GBM <- predict(mdlFit_GBM, newdata = testSet)
confusionMatrix(predict_GBM, testSet$classe)
confusionMatrix(predict_DT, testSet$classe)$Accuracy
confusionMatrix(predict_DT, testSet$classe)[1]
confusionMatrix(predict_DT, testSet$classe)[0]
confusionMatrix(predict_DT, testSet$classe)[1]
confusionMatrix(predict_DT, testSet$classe)$overall['Accuracy']
confusionMatrix(predict_DT, testSet$classe)$overall['Accuracy'];
confusionMatrix(predict_RF, testSet$classe)$overall['Accuracy'];
confusionMatrix(predict_GBM, testSet$classe)$overall['Accuracy'];
predict.Test <- predict(mdlFit_RF, newdata = testingSet)
print(cbind(predict.Test, testingSet$classe))
predict.Test
testingSet$classe
head(testingSet)
mdlFit_RF
predict.Test <- predict(mdlFit_RF, newdata = testingSet)
predict.Test
