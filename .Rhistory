library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, sep="|", fixed = T)
cnames <- strsplit(cnames, sep='|', fixed = T)
cnames <- strsplit(cnames, '|', fixed = T)
names(cnames)
cnames
wcol
cnames[[1]]
cnames[1]
cnames[[1]]
make.name(cnames[[1]][wcolE)]
make.name(cnames[[1]][wcolE))
make.name(cnames[[1]][wcol))
make.name(cnames[[1]][wcol]))
make.name(cnames[[1]][wcol])
make.names(cnames[[1]][wcol])
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0
x0 <- pm0$Sample.Values
x0 <- pm0$Sample.Value
str(x0)
is.na(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <=h- pm1$Sample.Value
x1 <- pm1$Sample.Value
mean(is.na(x1))
sammary(x0)
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
x1<0
negative <- x1<0
sum(negative)
sum(negative,na.rm = T)
sum(negative,na.rm = TRUE)
mean(negative,na.rm =TRUE)
dates <- as.Date(pm1$Date)
dates
as.Date(pm$Date)
as.Date(pm1$Date)
skip()
str(dates)
dates <- as.Date(dates, "%Y%m%d")
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative],"month")
str(site0)
intersect(site0,site1)
both <- intersect(site0,site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0,cnt0$county.site),nrow)
sapply(split(cnt1,cnt1$county.site),nrow)
pm0sub <- subset(cnt0, COunty.Code==63.2008)
pm0sub <- subset(cnt0, County.Code==63.2008)
pm0sub <- subset(cnt0, County.Code==63 & Site.ID==2008)
pm1sub <- subset(cnt1, County.Code==63 & Site.ID==2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date),"%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date),"%Y%m%d")
par(mfrow=c(1,2), margins=c(4,4,2,1))
par(mfrow=c(1,2), mar=c(4,4,2,1))
plot(dates0,x0sub,pch=20)
abline(meadian(x0sub,na.rm=TRUE),lwd=2)
abline(median(x0sub,na.rm=TRUE),lwd=2)
abline(median(x0sub,na.rm=TRUE),h,lwd=2)
abline(median(x0sub,na.rm=TRUE),h,lwd=2)skip()
skip()
plot(dates1,x1sub,pch=20)
abline(h=median(x1sub,na.rm=TRUE),h,lwd=2)
abline(h=median(x1sub,na.rm=TRUE),lwd=2)
rng <- range(x0sub,x1sub,na.rm=TRUE)
rng
mn00 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
head(mn0)
d0 <- data.frame(state=names(mn0), mean=mn0)
d1 <- data.frame(state=names(mn1), mean=mn1)
mrg <- merge(d0,d1,state)
mrg <- merge(d0,d1,"state")
dim(mrg)
head(mrg)
points(mrg, plot(rep(1,52),mrg[,2],xlim=c(.5,2.5)))
with(mrg, plot(rep(1,52),mrg[,2],xlim=c(.5,2.5)))
with(mrg, points(rep(2,52),mrg[,3]))
segments(rep(1,52),mrg[,2],rep(2,52),mrg[,3])
mrg[mrg$mean.x < mrg$mean.y]
mrg[mrg$mean.x < mrg$mean.y,]
0
install.packages("knitr")
search
search()
library()
library(swirl)
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
summary(fit)
summary(lm(Volume ~ Girth + Height, trees))
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y ~ x)
summary(lm(y ~ x))
dataset(mtcars)
?mtcars
mycars
mtcars
summary(mpg ~ wt, mtcars)
summary(lm(mpg ~ wt, mtcars))
-5.3445 - qnorm(.975) * .5591
-5.3445 - qnorm(.975) * .5591
f <- lm(mpg ~ wt, mtcars)
predict(f, wt=3000)
predict(f, 3000)
?predict
predict(f, wt=3000)
f
-6.486 + 3000 + f$coefficients[1]
f$coefficients[1]
coefficients(f)
coefficients(f)[1]
coefficients(f)[1] + 10
coefficients(f)[1] - 6.486 * 3000
plot(mtcars$wt, mtcarts$mpg)
plot(mtcars$wt, mtcars$mpg)
-5.3445 + qnorm(.975) * .5591
-4.2486 * 3 + f$coefficients[1]
summary(lm(y ~ x))$coef
summary(lm(y ~ x))$sigma
summary(lm(y ~ x))
predict(f, newdata = data.frame(wt = 3), interval = "prediction")
data.frame(we = 3)
predict(f, newdata = data.frame(wt = 1), interval = "prediction")
mean(mtcars$wt)
predict(f, newdata = data.frame(wt = 3.21725), interval = "prediction")
confint(f)
summary(f)
ls
swirl()
nrow(InsectSprays)
table(InsectSprays)
dim(InsectSprays)
head(InsectSprays, 15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays, FUN = class())
sapply(InsectSprays, FUN = classes())
class
sapply(InsectSprays, class
)
fit <- lm(count ~ spray, InsectSprays)
x$coef
fit$coef
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray -1, InsectSprays)
summary(nfit)
summary(nfit)$coef
relevel(InsectSprays$spray, "C")
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray, data = InsectSprays)
spray2
fit2 <- lm(count ~ spray2, data = InsectSprays)
summary(fit2)
summary(fit2)$coef
mean(sC)
(fit$coef[2] - fit$coef[3])/1.6011
dim(hunger)
948
names(humger)
names(hunger)
fit <- lm(X ~ Numeric, data=hunger)
fit <- lm(Numeric ~ Year, data=hunger)
summary(fit)$coef
lmf <- lm(Numeric ~ Year, data = hunger[hunger$Sex=="Femail"])
lmf <- lm(Numeric ~ Year, data = hunger[hunger$Sex=="Femail",])
lmf <- lm(Numeric ~ Year, data = hunger[hunger$Sex=="Female"])
lmf <- lm(Numeric ~ Year, data = hunger[hunger$Sex=="Female",])
lmf <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"], hunger)
lmf <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"], hunger)
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
out2
summary(fit)
plot(fit, which=1)
fitnof <- lm(y ~ x, out2[-1,])
fitno <- lm(y ~ x, out2[-1, ])
?plot
plot(fitno, which=1)
coef(fit) - coef(fitno)
head(dfbeta(fit))
out2[1,'y']
out2
resno <- out2[1,'y'] - predict(fitno, out2[1,])
resno
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(deviance(fit)/(length(out)-2))
sigma
df.residual(fit)
df
residual(fit)
sigma <- sqrt(deviance(fit)/(df.residual(fit))
)
rstd <- resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=1)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigmal*sqrt(1-hatvalues(fit)[]1))
resid(fit)[1]/(sigmal*sqrt(1-hatvalues(fit)[1]))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fit, out2) - predict(fitno, out2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
data(mtcars)
names(mtcars)
lm(mpg ~ cyl + wt, mtcars)
table(mtcars$cyl)
table(mtcars$wt)
mycyl <- factor(mtcars$cyl)
fit <- lm(mpg ~ cyl + wt, mtcars)
summary(fit)
fit <- lm(mpg ~ mycyl + wt, mtcars)
summary(fit)
fit2 <- lm(mpg ~ mycyl, mtcars)
summary(fit2)
fit3 <- lm(mpg ~ mycyl + wt + mycyl*wt, mtcars)
summary(fit3)
summary(fit)$coefficicents
summary(fit)$coefficients
lrtest(fit, fit3)
anova(fit, fit3, test="Chisq")
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hat(lm(y=x))
hat(lm(y~x))
lm(y~x)
f <- lm(y~ x)
plot(f)
plot( x, y)
summary(f)
predict(fit, x)
hatvalues(fit)
predict(f,x)
predict(fit, 1)
predict(f, x=1
)
predict(f, x=2)
hatvalues(f)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
f <- lm( y ~ x)
dfbeta(f)
dfbetas(f)
q()
rm(list=ls())
packages()
library()
install.packages("devtools")
devtools::install_github("jhudsl/collegeIncome")
library(collegeIncome)
data(college)
devtools::install_github("jhudsl/matahari")
library(matahari)
dance_start(value = FALSE, contents = FALSE)
str(college)
table(college$major_category)
head(college)
fit <- lm(median ~ major_category, college)
summary(fit)
fit <- lm(median ~ major_category -1, college)
summary(fit)
dance_save("~/Desktop/college_major_analysis.rds")
lmfit <- lm(median ~ major_category+perc_women+perc_college_jobs+perc_low_wage_jobs, data = college)
summary(lmfit)
fit <- lm(median ~ major_category, data = college)
summary(fit)
rm(list=ls())
swirl()
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ . - Examination, swiss)
vif(mdl2)
x1c <- simbias()
head(x1c)
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture+Examination+Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- deviance(fit1)-deviance(fit3)
n <- (deviance(fit1)-deviance(fit3))/2
n/d
?pf
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
knitr::opts_chunk$set(echo = TRUE)
```{r}
setwd("~/Documents/coursera/Practical_machine_learning/Assignment")
rm(list=ls())
# Download csv file from web page
if (!file.exists("./training.csv")) {
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile = "./training.csv")
}
if (!file.exists("./testing.csv")) {
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
destfile = "./testing.csv")
}
training <- read.csv("training.csv")
training <- read.csv("training.csv")
testing <- read.csv("testing.csv")
dim(training); dim(testing)
str(training)
# Exclude the columns
trainingSet <- training[, which(sapply(training, function(x){mean(is.na(x)) < 0.95}))]
testingSet <- testing[, which(sapply(training, function(x){mean(is.na(x)) < 0.95}))]
dim(trainingSet); dim(testingSet)
nzv <- nearZeroVar(trainingSet)
# Exclude near Zero Variance columns
library(caret)
# Exclude near Zero Variance columns
library(caret)
nzv <- nearZeroVar(trainingSet)
# Exclude near Zero Variance columns
library(caret)
nzv <- nearZeroVar(trainingSet)
trainingSet <- trainingSet[, -nzv]
nzv <- nearZeroVar(trainingSet)
trainingSet <- trainingSet[, -nzv]
testingSet <- testingSet[, -nzv]
dim(trainingSet); dim(testingSet)
# Exclude first 5 columns which is default.
trainingSet <- trainingSet[, -(1:5)]
testingSet <- testingSet[, -(1:5)]
dim(trainingSet); dim(testingSet)
set.seed(1234)
trainIndex <- createDataPartition(trainingSet$classe, p=0.75, list = FALSE)
trainSet <- trainingSet[trainIndex,]
set.seed(1234)
trainIndex <- createDataPartition(trainingSet$classe, p=0.75, list = FALSE)
# Exclude the columns
trainingSet <- training[, which(sapply(training, function(x){mean(is.na(x)) < 0.95}))]
testingSet <- testing[, which(sapply(training, function(x){mean(is.na(x)) < 0.95}))]
dim(trainingSet); dim(testingSet)
# Exclude near Zero Variance columns
library(caret)
nzv <- nearZeroVar(trainingSet)
nzv <- nearZeroVar(trainingSet)
trainingSet <- trainingSet[, -nzv]
testingSet <- testingSet[, -nzv]
dim(trainingSet); dim(testingSet)
# Exclude first 5 columns which is default.
trainingSet <- trainingSet[, -(1:5)]
testingSet <- testingSet[, -(1:5)]
dim(trainingSet); dim(testingSet)
set.seed(1234)
trainIndex <- createDataPartition(trainingSet$classe, p=0.75, list = FALSE)
trainSet <- trainingSet[trainIndex,]
testSet <- trainingSet[-trainIndex,]
library(corrplot)
corrMatrix <- cor(trainSet[, -54])
corrplot(corrMatrix, method="circle", type="lower", order="hclust", tl.cex = 0.5, tl.col="black")
library(rpart)
library(rattle)
set.seed(1234)
#mdlFit_DT <- rpart(classe ~ ., data=trainSet, method="class")
tc.rpart <- trainControl("cv",10)
mdlFit_DT <- train(classe ~ ., data=trainSet, method="rpart", trControl=tc.rpart)
printcp(mdlFit_DT)
fancyRpartPlot(mdlFit_DT)
#fancyRpartPlot(mdlFit_DT)
mdlFit_DT
predict_DT <- predict(mdlFit_DT, newdata = testSet, type="class")
predict_DT <- predict(mdlFit_DT, newdata = testSet)
confusionMatrix(predict_DT, testSet$classe)
mdlFit_DT <- rpart(classe ~ ., data=trainSet, method="class")
#fancyRpartPlot(mdlFit_DT)
mdlFit_DT
#fancyRpartPlot(mdlFit_DT)
plotcp(mdlFit_DT)
predict_DT <- predict(mdlFit_DT, newdata = testSet)
confusionMatrix(predict_DT, testSet$classe)
predict_DT <- predict(mdlFit_DT, newdata = testSet, type="class")
confusionMatrix(predict_DT, testSet$classe)
fancyRpartPlot(mdlFit_DT)
plotcp(mdlFit_DT)
printcp(mdlFit_DT)
set.seed(1234)
mdlFit_DT <- rpart(classe ~ ., data=trainSet, method="class")
#tc.rpart <- trainControl("cv",10)
#mdlFit_DT <- train(classe ~ ., data=trainSet, method="rpart", trControl=tc.rpart)
fancyRpartPlot(mdlFit_DT)
predict_DT <- predict(mdlFit_DT, newdata = testSet, type="class")
confusionMatrix(predict_DT, testSet$classe)
mdlFit_DT <- rpart(classe ~ ., data=trainSet, method="class", control = rpart.control(cp= .003))
#tc.rpart <- trainControl("cv",10)
#mdlFit_DT <- train(classe ~ ., data=trainSet, method="rpart", trControl=tc.rpart)
fancyRpartPlot(mdlFit_DT)
predict_DT <- predict(mdlFit_DT, newdata = testSet, type="class")
confusionMatrix(predict_DT, testSet$classe)
mdlFit_DT <- rpart(classe ~ ., data=trainSet, method="class", control = rpart.control(cp= .03))
#tc.rpart <- trainControl("cv",10)
#mdlFit_DT <- train(classe ~ ., data=trainSet, method="rpart", trControl=tc.rpart)
fancyRpartPlot(mdlFit_DT)
predict_DT <- predict(mdlFit_DT, newdata = testSet, type="class")
confusionMatrix(predict_DT, testSet$classe)
plotcp(mdlFit_DT)
#tc.rpart <- trainControl("cv",10)
#mdlFit_DT <- train(classe ~ ., data=trainSet, method="rpart", trControl=tc.rpart)
fancyRpartPlot(mdlFit_DT)
mdlFit_DT <- rpart(classe ~ ., data=trainSet, method="class")
printcp(mdlFit_DT)
#tc.rpart <- trainControl("cv",10)
#mdlFit_DT <- train(classe ~ ., data=trainSet, method="rpart", trControl=tc.rpart)
fancyRpartPlot(mdlFit_DT)
predict_DT <- predict(mdlFit_DT, newdata = testSet, type="class")
confusionMatrix(predict_DT, testSet$classe)
tc.rpart <- trainControl("cv",4)
mdlFit_DT <- train(classe ~ ., data=trainSet, method="rpart", trControl=tc.rpart)
fancyRpartPlot(mdlFit_DT$finalModel)
tc.rpart <- trainControl("cv",8)
mdlFit_DT <- train(classe ~ ., data=trainSet, method="rpart", trControl=tc.rpart)
mdlFit_DT <- train(classe ~ ., data=trainSet, method="rpart", trControl=tc.rpart)
fancyRpartPlot(mdlFit_DT$finalModel)
rpart.grid <- expand.grid(.cp=0.3)
printcp(mdlFit_DT$finalModel)
plotcp(mdlFit_DT$finalModel)
rpart.grid <- expand.grid(.cp=0.2)
mdlFit_DT <- train(classe ~ ., data=trainSet, method="rpart", trControl=tc.rpart, tuneGrid=rpart.grid)
fancyRpartPlot(mdlFit_DT$finalModel)
tc.rpart <- trainControl("cv",4)
rpart.grid <- expand.grid(.cp=0.2)
mdlFit_DT <- train(classe ~ ., data=trainSet, method="rpart", trControl=tc.rpart, tuneGrid=rpart.grid)
fancyRpartPlot(mdlFit_DT$finalModel)
mdlFit_DT <- train(classe ~ ., data=trainSet, method="rpart", trControl=tc.rpart)#,# tuneGrid=rpart.grid)
fancyRpartPlot(mdlFit_DT$finalModel)
printcp(mdlFit_DT$finalModel)
rpart.grid <- expand.grid(.cp=0.03)
mdlFit_DT <- train(classe ~ ., data=trainSet, method="rpart", trControl=tc.rpart, tuneGrid=rpart.grid)
fancyRpartPlot(mdlFit_DT$finalModel)
printcp(mdlFit_DT$finalModel)
mdlFit_DT
mdlFit_DT$finalModel
predict_DT <- predict(mdlFit_DT, newdata = testSet, type="class")
predict_DT <- predict(mdlFit_DT, newdata = testSet)
confusionMatrix(predict_DT, testSet$classe)
rpart.grid <- expand.grid(.cp=0.001)
mdlFit_DT <- train(classe ~ ., data=trainSet, method="rpart", trControl=tc.rpart, tuneGrid=rpart.grid)
fancyRpartPlot(mdlFit_DT$finalModel)
mdlFit_DT
predict_DT <- predict(mdlFit_DT, newdata = testSet)
confusionMatrix(predict_DT, testSet$classe)
tc <- trainControl("cv",4)
set.seed(1234)
mdlFit_RF <- train(classe ~ ., data = trainSet, method="rf", trControl=tc)
mdlFit_RF
predict_RF <- predict(mdlFit_RF, newdata = testSet)
confusionMatrix(predict_RF, testSet$classe)
set.seed(1234)
mdlFit_GBM <- train(classe ~ ., data = trainSet, method="gbm", trControl=tc)
mdlFit_GBM
predict_GBM <- predict(mdlFit_GBM, newdata = testSet)
confusionMatrix(predict_GBM, testSet$classe)
confusionMatrix(predict_DT, testSet$classe)$overall['Accuracy']
confusionMatrix(predict_RF, testSet$classe)$overall['Accuracy']
confusionMatrix(predict_GBM, testSet$classe)$overall['Accuracy']
predict.Test <- predict(mdlFit_RF, newdata = testingSet)
predict.Test
